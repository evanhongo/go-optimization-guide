<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>Go Optimization Guide</title><description>Patterns and Techniques for Writing High-Performance Applications with Go</description><link>https://goperf.dev/</link><atom:link href="https://goperf.dev/feed_rss_created.xml" rel="self" type="application/rss+xml" /><docs>https://github.com/astavonin/go-optimization-guide</docs><language>en</language> <pubDate>Sat, 17 May 2025 12:28:56 -0000</pubDate> <lastBuildDate>Sat, 17 May 2025 12:28:56 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.17.1</generator> <image> <url>None</url> <title>Go Optimization Guide</title><link>https://goperf.dev/</link> </image> <item> <title>atomics</title> <description>&lt;h1&gt;atomics&lt;/h1&gt;</description><link>https://goperf.dev/blog/category/atomics/</link> <pubDate>Sat, 17 May 2025 12:28:57 +0000</pubDate><source url="https://goperf.dev/feed_rss_created.xml">Go Optimization Guide</source><guid isPermaLink="true">https://goperf.dev/blog/category/atomics/</guid> </item> <item> <title>2025</title> <description>&lt;h1&gt;2025&lt;/h1&gt;</description><link>https://goperf.dev/blog/archive/2025/</link> <pubDate>Sat, 17 May 2025 12:28:57 +0000</pubDate><source url="https://goperf.dev/feed_rss_created.xml">Go Optimization Guide</source><guid isPermaLink="true">https://goperf.dev/blog/archive/2025/</guid> </item> <item> <title>Common Go Patterns for Performance</title> <description>&lt;h1&gt;Common Go Patterns for Performance&lt;/h1&gt;&lt;p&gt;Optimizing Go applications requires understanding common patterns that help reduce latency, improve memory efficiency, ...&lt;/p&gt;</description><link>https://goperf.dev/01-common-patterns/</link> <pubDate>Fri, 16 May 2025 09:40:37 +0000</pubDate><source url="https://goperf.dev/feed_rss_created.xml">Go Optimization Guide</source><guid isPermaLink="true">https://goperf.dev/01-common-patterns/</guid> </item> <item> <title>Atomic Operations and Synchronization Primitives</title> <description>&lt;h1&gt;Atomic Operations and Synchronization Primitives&lt;/h1&gt;&lt;p&gt;In high-concurrency systems, performance isn&#39;t just about what you do—it&#39;s about what you avoid. Lock con...&lt;/p&gt;</description><link>https://goperf.dev/01-common-patterns/atomic-ops/</link> <pubDate>Fri, 16 May 2025 09:40:37 +0000</pubDate><source url="https://goperf.dev/feed_rss_created.xml">Go Optimization Guide</source><guid isPermaLink="true">https://goperf.dev/01-common-patterns/atomic-ops/</guid> </item> <item> <title>Batching Operations</title> <description>&lt;h1&gt;Batching Operations in Go&lt;/h1&gt;&lt;p&gt;Batching is a simple but effective way to boost performance in high-throughput Go applications. By grouping multiple operations ...&lt;/p&gt;</description><link>https://goperf.dev/01-common-patterns/batching-ops/</link> <pubDate>Fri, 16 May 2025 09:40:37 +0000</pubDate><source url="https://goperf.dev/feed_rss_created.xml">Go Optimization Guide</source><guid isPermaLink="true">https://goperf.dev/01-common-patterns/batching-ops/</guid> </item> <item> <title>Efficient Buffering</title> <description>&lt;h1&gt;Efficient Buffering in Go&lt;/h1&gt;&lt;p&gt;Buffering is a core performance technique in systems programming. In Go, it&#39;s especially relevant when working with I/O—file acc...&lt;/p&gt;</description><link>https://goperf.dev/01-common-patterns/buffered-io/</link> <pubDate>Fri, 16 May 2025 09:40:37 +0000</pubDate><source url="https://goperf.dev/feed_rss_created.xml">Go Optimization Guide</source><guid isPermaLink="true">https://goperf.dev/01-common-patterns/buffered-io/</guid> </item> <item> <title>Leveraging Compiler Optimization Flags</title> <description>&lt;h1&gt;Leveraging Compiler Optimization Flags in Go&lt;/h1&gt;&lt;p&gt;When optimizing Go applications for performance, we often focus on profiling, memory allocations, or concurre...&lt;/p&gt;</description><link>https://goperf.dev/01-common-patterns/comp-flags/</link> <pubDate>Fri, 16 May 2025 09:40:37 +0000</pubDate><source url="https://goperf.dev/feed_rss_created.xml">Go Optimization Guide</source><guid isPermaLink="true">https://goperf.dev/01-common-patterns/comp-flags/</guid> </item> <item> <title>Efficient Context Management</title> <description>&lt;h1&gt;Efficient Context Management&lt;/h1&gt;&lt;p&gt;Whether you&#39;re handling HTTP requests, coordinating worker goroutines, or querying external services, there&#39;s often a need to...&lt;/p&gt;</description><link>https://goperf.dev/01-common-patterns/context/</link> <pubDate>Fri, 16 May 2025 09:40:37 +0000</pubDate><source url="https://goperf.dev/feed_rss_created.xml">Go Optimization Guide</source><guid isPermaLink="true">https://goperf.dev/01-common-patterns/context/</guid> </item> <item> <title>Struct Field Alignment</title> <description>&lt;h1&gt;Struct Field Alignment&lt;/h1&gt;&lt;p&gt;When optimizing Go programs for performance, struct layout and memory alignment often go unnoticed—yet they have a measurable impac...&lt;/p&gt;</description><link>https://goperf.dev/01-common-patterns/fields-alignment/</link> <pubDate>Fri, 16 May 2025 09:40:37 +0000</pubDate><source url="https://goperf.dev/feed_rss_created.xml">Go Optimization Guide</source><guid isPermaLink="true">https://goperf.dev/01-common-patterns/fields-alignment/</guid> </item> <item> <title>Memory Efficiency and Go’s Garbage Collector</title> <description>&lt;h1&gt;Memory Efficiency: Mastering Go’s Garbage Collector&lt;/h1&gt;&lt;p&gt;Memory management in Go is automated—but it’s not invisible. Every allocation you make contributes to ...&lt;/p&gt;</description><link>https://goperf.dev/01-common-patterns/gc/</link> <pubDate>Fri, 16 May 2025 09:40:37 +0000</pubDate><source url="https://goperf.dev/feed_rss_created.xml">Go Optimization Guide</source><guid isPermaLink="true">https://goperf.dev/01-common-patterns/gc/</guid> </item> <item> <title>Immutable Data Sharing</title> <description>&lt;h1&gt;Immutable Data Sharing&lt;/h1&gt;&lt;p&gt;One common bottleneck when building high-performance Go applications is concurrent access to shared data. The traditional approach ...&lt;/p&gt;</description><link>https://goperf.dev/01-common-patterns/immutable-data/</link> <pubDate>Fri, 16 May 2025 09:40:37 +0000</pubDate><source url="https://goperf.dev/feed_rss_created.xml">Go Optimization Guide</source><guid isPermaLink="true">https://goperf.dev/01-common-patterns/immutable-data/</guid> </item> <item> <title>Avoiding Interface Boxing</title> <description>&lt;h1&gt;Avoiding Interface Boxing&lt;/h1&gt;&lt;p&gt;Go’s interfaces make it easy to write flexible, decoupled code. But behind that convenience is a detail that can trip up perform...&lt;/p&gt;</description><link>https://goperf.dev/01-common-patterns/interface-boxing/</link> <pubDate>Fri, 16 May 2025 09:40:37 +0000</pubDate><source url="https://goperf.dev/feed_rss_created.xml">Go Optimization Guide</source><guid isPermaLink="true">https://goperf.dev/01-common-patterns/interface-boxing/</guid> </item> <item> <title>Lazy Initialization</title> <description>&lt;h2&gt;Lazy Initialization for Performance in Go&lt;/h2&gt;&lt;p&gt;In Go, some resources are expensive to initialize, or simply unnecessary unless certain code paths are triggere...&lt;/p&gt;</description><link>https://goperf.dev/01-common-patterns/lazy-init/</link> <pubDate>Fri, 16 May 2025 09:40:37 +0000</pubDate><source url="https://goperf.dev/feed_rss_created.xml">Go Optimization Guide</source><guid isPermaLink="true">https://goperf.dev/01-common-patterns/lazy-init/</guid> </item> <item> <title>Memory Preallocation</title> <description>&lt;h1&gt;Memory Preallocation&lt;/h1&gt;&lt;p&gt;Memory preallocation is a practical way to improve performance in Go programs that deal with growing slices or maps. By allocating en...&lt;/p&gt;</description><link>https://goperf.dev/01-common-patterns/mem-prealloc/</link> <pubDate>Fri, 16 May 2025 09:40:37 +0000</pubDate><source url="https://goperf.dev/feed_rss_created.xml">Go Optimization Guide</source><guid isPermaLink="true">https://goperf.dev/01-common-patterns/mem-prealloc/</guid> </item> <item> <title>Object Pooling</title> <description>&lt;h1&gt;Object Pooling&lt;/h1&gt;&lt;p&gt;Object pooling is a practical way to cut down on memory allocation costs in performance-critical Go applications. Instead of creating and d...&lt;/p&gt;</description><link>https://goperf.dev/01-common-patterns/object-pooling/</link> <pubDate>Fri, 16 May 2025 09:40:37 +0000</pubDate><source url="https://goperf.dev/feed_rss_created.xml">Go Optimization Guide</source><guid isPermaLink="true">https://goperf.dev/01-common-patterns/object-pooling/</guid> </item> <item> <title>Stack Allocations and Escape Analysis</title> <description>&lt;h1&gt;Stack Allocations and Escape Analysis&lt;/h1&gt;&lt;p&gt;When writing performance-critical Go applications, one of the subtle but significant optimizations you can make is e...&lt;/p&gt;</description><link>https://goperf.dev/01-common-patterns/stack-alloc/</link> <pubDate>Fri, 16 May 2025 09:40:37 +0000</pubDate><source url="https://goperf.dev/feed_rss_created.xml">Go Optimization Guide</source><guid isPermaLink="true">https://goperf.dev/01-common-patterns/stack-alloc/</guid> </item> <item> <title>Goroutine Worker Pools</title> <description>&lt;h1&gt;Goroutine Worker Pools in Go&lt;/h1&gt;&lt;p&gt;Go’s lightweight concurrency model makes spawning goroutines nearly free in terms of syntax and initial memory footprint—but ...&lt;/p&gt;</description><link>https://goperf.dev/01-common-patterns/worker-pool/</link> <pubDate>Fri, 16 May 2025 09:40:37 +0000</pubDate><source url="https://goperf.dev/feed_rss_created.xml">Go Optimization Guide</source><guid isPermaLink="true">https://goperf.dev/01-common-patterns/worker-pool/</guid> </item> <item> <title>Zero-Copy Techniques</title> <description>&lt;h1&gt;Zero-Copy Techniques&lt;/h1&gt;&lt;p&gt;Managing memory wisely can make a noticeable difference when writing performance-critical Go code. Zero-copy techniques are particula...&lt;/p&gt;</description><link>https://goperf.dev/01-common-patterns/zero-copy/</link> <pubDate>Fri, 16 May 2025 09:40:37 +0000</pubDate><source url="https://goperf.dev/feed_rss_created.xml">Go Optimization Guide</source><guid isPermaLink="true">https://goperf.dev/01-common-patterns/zero-copy/</guid> </item> <item> <title>Index</title> <description>&lt;p&gt;Best practices for connection pooling, buffer reuse, and tuning TCP stack settings for latency-sensitive or throughput-heavy services, validated through netw...&lt;/p&gt;</description><link>https://goperf.dev/02-networking/</link> <pubDate>Fri, 16 May 2025 09:40:37 +0000</pubDate><source url="https://goperf.dev/feed_rss_created.xml">Go Optimization Guide</source><guid isPermaLink="true">https://goperf.dev/02-networking/</guid> </item> <item> <title>Blog</title> <description>&lt;h1&gt;Blog&lt;/h1&gt;</description><link>https://goperf.dev/blog/</link> <pubDate>Fri, 16 May 2025 09:40:37 +0000</pubDate><source url="https://goperf.dev/feed_rss_created.xml">Go Optimization Guide</source><guid isPermaLink="true">https://goperf.dev/blog/</guid> </item> </channel></rss>