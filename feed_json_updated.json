{"version": "https://jsonfeed.org/version/1", "title": "Go Optimization Guide", "home_page_url": "https://goperf.dev/", "feed_url": "https://goperf.dev/feed_json_updated.json", "description": "Patterns and Techniques for Writing High-Performance Applications with Go", "icon": null, "authors": [], "language": "en", "items": [{"id": "https://goperf.dev/blog/category/atomics/", "url": "https://goperf.dev/blog/category/atomics/", "title": "atomics", "content_html": "<h1>atomics</h1>", "image": null, "date_modified": "2025-05-17T12:28:57.466855+00:00", "authors": [], "tags": null}, {"id": "https://goperf.dev/blog/archive/2025/", "url": "https://goperf.dev/blog/archive/2025/", "title": "2025", "content_html": "<h1>2025</h1>", "image": null, "date_modified": "2025-05-17T12:28:57.461849+00:00", "authors": [], "tags": null}, {"id": "https://goperf.dev/01-common-patterns/", "url": "https://goperf.dev/01-common-patterns/", "title": "Common Go Patterns for Performance", "content_html": "<h1>Common Go Patterns for Performance</h1>\n<p>Optimizing Go applications requires understanding common patterns that help reduce latency, improve memory efficiency, ...</p>", "image": null, "date_modified": "2025-05-16T09:40:37+00:00", "authors": [], "tags": null}, {"id": "https://goperf.dev/01-common-patterns/atomic-ops/", "url": "https://goperf.dev/01-common-patterns/atomic-ops/", "title": "Atomic Operations and Synchronization Primitives", "content_html": "<h1>Atomic Operations and Synchronization Primitives</h1>\n<p>In high-concurrency systems, performance isn't just about what you do\u2014it's about what you avoid. Lock con...</p>", "image": null, "date_modified": "2025-05-16T09:40:37+00:00", "authors": [], "tags": null}, {"id": "https://goperf.dev/01-common-patterns/batching-ops/", "url": "https://goperf.dev/01-common-patterns/batching-ops/", "title": "Batching Operations", "content_html": "<h1>Batching Operations in Go</h1>\n<p>Batching is a simple but effective way to boost performance in high-throughput Go applications. By grouping multiple operations ...</p>", "image": null, "date_modified": "2025-05-16T09:40:37+00:00", "authors": [], "tags": null}, {"id": "https://goperf.dev/01-common-patterns/buffered-io/", "url": "https://goperf.dev/01-common-patterns/buffered-io/", "title": "Efficient Buffering", "content_html": "<h1>Efficient Buffering in Go</h1>\n<p>Buffering is a core performance technique in systems programming. In Go, it's especially relevant when working with I/O\u2014file acc...</p>", "image": null, "date_modified": "2025-05-16T09:40:37+00:00", "authors": [], "tags": null}, {"id": "https://goperf.dev/01-common-patterns/comp-flags/", "url": "https://goperf.dev/01-common-patterns/comp-flags/", "title": "Leveraging Compiler Optimization Flags", "content_html": "<h1>Leveraging Compiler Optimization Flags in Go</h1>\n<p>When optimizing Go applications for performance, we often focus on profiling, memory allocations, or concurre...</p>", "image": null, "date_modified": "2025-05-16T09:40:37+00:00", "authors": [], "tags": null}, {"id": "https://goperf.dev/01-common-patterns/context/", "url": "https://goperf.dev/01-common-patterns/context/", "title": "Efficient Context Management", "content_html": "<h1>Efficient Context Management</h1>\n<p>Whether you're handling HTTP requests, coordinating worker goroutines, or querying external services, there's often a need to...</p>", "image": null, "date_modified": "2025-05-16T09:40:37+00:00", "authors": [], "tags": null}, {"id": "https://goperf.dev/01-common-patterns/fields-alignment/", "url": "https://goperf.dev/01-common-patterns/fields-alignment/", "title": "Struct Field Alignment", "content_html": "<h1>Struct Field Alignment</h1>\n<p>When optimizing Go programs for performance, struct layout and memory alignment often go unnoticed\u2014yet they have a measurable impac...</p>", "image": null, "date_modified": "2025-05-16T09:40:37+00:00", "authors": [], "tags": null}, {"id": "https://goperf.dev/01-common-patterns/gc/", "url": "https://goperf.dev/01-common-patterns/gc/", "title": "Memory Efficiency and Go\u2019s Garbage Collector", "content_html": "<h1>Memory Efficiency: Mastering Go\u2019s Garbage Collector</h1>\n<p>Memory management in Go is automated\u2014but it\u2019s not invisible. Every allocation you make contributes to ...</p>", "image": null, "date_modified": "2025-05-16T09:40:37+00:00", "authors": [], "tags": null}, {"id": "https://goperf.dev/01-common-patterns/immutable-data/", "url": "https://goperf.dev/01-common-patterns/immutable-data/", "title": "Immutable Data Sharing", "content_html": "<h1>Immutable Data Sharing</h1>\n<p>One common bottleneck when building high-performance Go applications is concurrent access to shared data. The traditional approach ...</p>", "image": null, "date_modified": "2025-05-16T09:40:37+00:00", "authors": [], "tags": null}, {"id": "https://goperf.dev/01-common-patterns/interface-boxing/", "url": "https://goperf.dev/01-common-patterns/interface-boxing/", "title": "Avoiding Interface Boxing", "content_html": "<h1>Avoiding Interface Boxing</h1>\n<p>Go\u2019s interfaces make it easy to write flexible, decoupled code. But behind that convenience is a detail that can trip up perform...</p>", "image": null, "date_modified": "2025-05-16T09:40:37+00:00", "authors": [], "tags": null}, {"id": "https://goperf.dev/01-common-patterns/lazy-init/", "url": "https://goperf.dev/01-common-patterns/lazy-init/", "title": "Lazy Initialization", "content_html": "<h2>Lazy Initialization for Performance in Go</h2>\n<p>In Go, some resources are expensive to initialize, or simply unnecessary unless certain code paths are triggere...</p>", "image": null, "date_modified": "2025-05-16T09:40:37+00:00", "authors": [], "tags": null}, {"id": "https://goperf.dev/01-common-patterns/mem-prealloc/", "url": "https://goperf.dev/01-common-patterns/mem-prealloc/", "title": "Memory Preallocation", "content_html": "<h1>Memory Preallocation</h1>\n<p>Memory preallocation is a practical way to improve performance in Go programs that deal with growing slices or maps. By allocating en...</p>", "image": null, "date_modified": "2025-05-16T09:40:37+00:00", "authors": [], "tags": null}, {"id": "https://goperf.dev/01-common-patterns/object-pooling/", "url": "https://goperf.dev/01-common-patterns/object-pooling/", "title": "Object Pooling", "content_html": "<h1>Object Pooling</h1>\n<p>Object pooling is a practical way to cut down on memory allocation costs in performance-critical Go applications. Instead of creating and d...</p>", "image": null, "date_modified": "2025-05-16T09:40:37+00:00", "authors": [], "tags": null}, {"id": "https://goperf.dev/01-common-patterns/stack-alloc/", "url": "https://goperf.dev/01-common-patterns/stack-alloc/", "title": "Stack Allocations and Escape Analysis", "content_html": "<h1>Stack Allocations and Escape Analysis</h1>\n<p>When writing performance-critical Go applications, one of the subtle but significant optimizations you can make is e...</p>", "image": null, "date_modified": "2025-05-16T09:40:37+00:00", "authors": [], "tags": null}, {"id": "https://goperf.dev/01-common-patterns/worker-pool/", "url": "https://goperf.dev/01-common-patterns/worker-pool/", "title": "Goroutine Worker Pools", "content_html": "<h1>Goroutine Worker Pools in Go</h1>\n<p>Go\u2019s lightweight concurrency model makes spawning goroutines nearly free in terms of syntax and initial memory footprint\u2014but ...</p>", "image": null, "date_modified": "2025-05-16T09:40:37+00:00", "authors": [], "tags": null}, {"id": "https://goperf.dev/01-common-patterns/zero-copy/", "url": "https://goperf.dev/01-common-patterns/zero-copy/", "title": "Zero-Copy Techniques", "content_html": "<h1>Zero-Copy Techniques</h1>\n<p>Managing memory wisely can make a noticeable difference when writing performance-critical Go code. Zero-copy techniques are particula...</p>", "image": null, "date_modified": "2025-05-16T09:40:37+00:00", "authors": [], "tags": null}, {"id": "https://goperf.dev/02-networking/", "url": "https://goperf.dev/02-networking/", "title": "Index", "content_html": "<p>Best practices for connection pooling, buffer reuse, and tuning TCP stack settings for latency-sensitive or throughput-heavy services, validated through netw...</p>", "image": null, "date_modified": "2025-05-16T09:40:37+00:00", "authors": [], "tags": null}, {"id": "https://goperf.dev/blog/", "url": "https://goperf.dev/blog/", "title": "Blog", "content_html": "<h1>Blog</h1>", "image": null, "date_modified": "2025-05-16T09:40:37+00:00", "authors": [], "tags": null}]}